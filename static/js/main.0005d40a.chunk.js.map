{"version":3,"sources":["components/layout/header/Header.js","components/layout/footer/Footer.js","context/MyContext.js","components/pages/home/sidebar/Sidebar.js","data/FileIconTypes.js","components/pages/home/explorer/ExplorerRow/ExplorerRow.js","components/pages/home/explorer/Explorer.js","components/pages/home/Home.js","context/MyProvider.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Footer","MyContext","React","createContext","Sidebar","state","collapsed","toggle","currentState","setState","Actions","Consumer","context","map","value","key","type","title","Name","ImageName","this","onClick","FileIconTypes","ExplorerRow","handleChange","event","target","checked","name","handleItemClick","getAttribute","props","onRowClick","Fragment","Type","toLowerCase","includes","Subtype","size","Description","ModifiedDate","onChange","Explorer","folderExpand","expandeFolderName","handleRowClick","role","GridData","Children","cValue","cKey","Home","MyProvider","data","Provider","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0005d40a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Header.scss'\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <header className=\"p-2 pl-3 bg-dark text-white\">\n                <h5>Docusign</h5>\n            </header>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Footer.scss'\n\nexport default class Footer extends Component {\n    render() {\n        return (\n            <footer className=\"p-3 bg-light text-dark fixed-bottom text-center\">\n                @anhnbien\n            </footer>\n        )\n    }\n}\n","import React from 'react'\n\n//Use Context API to store all initial data\nconst MyContext = React.createContext();\n\nexport default MyContext;","import React, { Component } from 'react'\nimport './Sidebar.scss'\nimport MyContext from '../../../../context/MyContext'\n\nexport default class Sidebar extends Component {\n    state={\n        collapsed: true\n    }\n\n    //Toggle sidebar\n    toggle = () =>{\n        const currentState= this.state.collapsed;\n        this.setState({\n            collapsed: !currentState\n        })\n    }\n\n    render() {\n        //Render all action options\n        const Actions =(\n            <MyContext.Consumer>\n                {(context)=>(\n                    context.Actions.map((value, key)=>\n                        <button key={key} type=\"button\" className=\"btn btn-info m-1\" title={value.Name}>\n                            <span className={\"fas fa-\" + value.ImageName}/>\n                        </button>\n                    )\n                )}\n            </MyContext.Consumer>\n        )\n        return (\n            <nav className={\"bg-light sidebar border \" + (this.state.collapsed?\"collapsed\":\"\")}>\n                <div className=\"sidebar-sticky d-flex align-items-start flex-column\">\n                    <div className=\"ml-2 d-none d-sm-block\">\n                        <span className=\"text-left btn-collapse\" onClick={this.toggle} title=\"Toggle\">\n                            <span className=\"fas fa-chevron-circle-right\"></span>\n                        </span>\n                    </div>\n                    {/* Append actions buttons */}\n                    <div className=\"d-flex flex-wrap button-wrapper ml-2 mr-2\">{Actions}</div>\n                </div>\n            </nav>\n            \n        )\n    }\n}\n","const FileIconTypes=[\n    \"3d\",\"acrobat\",\"audio\",\"binary\",\"code\",\"code2\",\"compressed\",\"document\",\"drive\",\"font\",\"image\",\"presentation\",\"settings\",\"spreadsheet\",\"vector\",\"video\"\n]\nexport default FileIconTypes","import React, { Component } from 'react'\nimport FileIcon from 'react-file-icon'\nimport FileIconTypes from '../../../../../data/FileIconTypes'\n\nexport default class ExplorerRow extends Component {\n    \n    //handle Checkboxes click event and add checked value in an array in state\n    //TODO: Sent this back to parent for more action (delete, share,...)\n    handleChange = (event) =>{\n        const target = event.target\n        const value = target.type === \"checkbox\"? target.checked: target.value\n        const name = target.name\n        this.setState({\n            [name]: value\n        })\n    }\n\n    //Handle Folder/File Name click event, return name and type back to parent\n    handleItemClick = (event) =>{\n        const target = event.target\n        const name = target.getAttribute(\"name\")\n        const type = target.getAttribute(\"type\")\n        this.props.onRowClick(name, type)\n    }\n\n    render() {\n        const value=this.props.value\n        return (\n            <React.Fragment>\n                <div className=\"col name\" onClick={this.handleItemClick}>\n                    {\n                        // show appropreate icon for folder/file type\n                        (value.Type.toLowerCase()===\"folder\"?\n                            <i className=\"fas fa-folder text-warning\"></i>:\n                            <FileIcon type={FileIconTypes.includes(value.Subtype.toLowerCase())?value.Subtype.toLowerCase():\"document\"} size={32} />\n                        )\n                    }\n                    <span className=\"pl-2\" name={value.Name} type={value.Type}>{value.Name}</span>\n                </div>\n                <div className=\"col\">{value.Description}</div>\n                <div className=\"col\">{value.ModifiedDate}</div>\n                <div className=\"col text-center\"><input type=\"checkbox\" onChange={this.handleChange} name={value.Name}/></div>\n            </React.Fragment>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport MyContext from '../../../../context/MyContext'\nimport './Explorer.scss'\nimport ExplorerRow from './ExplorerRow/ExplorerRow'\n\nexport default class Explorer extends Component {\n    state={\n        folderExpand: false,\n        expandeFolderName: \"\"\n    }\n\n    //Handle row click event by getting info from ExplorerRow child\n    //and only expand folder with the right name\n    handleRowClick = (name, type) =>{\n        //Expand folder by name\n        //TODO: expand folder by ID if possible\n        if(type && type.toLowerCase()===\"folder\"){\n            const currentState = this.state.folderExpand\n            this.setState({\n                folderExpand : !currentState,\n                expandeFolderName: name && name\n            })\n        }\n    }\n    render() {\n        return (\n            <main role=\"main\" className=\"w-100 ml-sm-auto px-4\">\n                <div className=\"pl-table border-bottom border-info\">\n                    {/* Sticky Header */}\n                    <div className=\"pl-thead tall border-bottom border-info\">\n                        <div className=\"row p-2\">\n                            <div className=\"col name\">Name</div>\n                            <div className=\"col\">Description</div>\n                            <div className=\"col\">Modified Date</div>\n                            <div className=\"col\">&nbsp;</div>\n                        </div>\n                    </div>\n                    {/* Table Content */}\n                    <div className=\"pl-tbody scroll\">\n                        <MyContext.Consumer>\n                            {(context)=>(\n                                context.GridData.map((value, key)=>(\n                                    <React.Fragment key={key}>\n                                        <div className=\"row p-1 border-bottom\">\n                                            <ExplorerRow value={value} onRowClick={this.handleRowClick}/>\n                                        </div>\n                                        {                                           \n                                            //Render children if available\n                                            (value.Children && (\n                                                value.Children.map((cValue, cKey)=>(\n                                                <div className={\"subRow row p-1 border-bottom \" + \n                                                                (this.state.folderExpand && this.state.expandeFolderName === value.Name?\n                                                                this.state.expandeFolderName:\"d-none\")} \n                                                                key={cKey}>\n                                                    <ExplorerRow value={cValue} onRowClick={this.handleRowClick}/>\n                                                </div>\n                                                )))\n                                            )\n                                        }\n                                    </React.Fragment>\n                                ))\n                            )}\n                        </MyContext.Consumer>\n                    </div>\n                </div>\n            </main>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Sidebar from './sidebar/Sidebar'\nimport Explorer from './explorer/Explorer'\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div className=\"d-flex flex-column-reverse flex-sm-row\">\n                <Explorer/>\n                <Sidebar/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport MyContext from './MyContext'\nimport data from '../data/SpringCM UI Exercise.json'\n\nexport default class MyProvider extends Component {\n    state={\n        data\n    }\n    render() {\n        return (\n            <MyContext.Provider value={this.state.data}>\n                {this.props.children}\n            </MyContext.Provider>\n        )\n    }\n}\n","import React from 'react'\nimport Header from './components/layout/header/Header'\nimport Footer from './components/layout/footer/Footer'\nimport './App.css'\nimport './Custom.scss'\nimport Home from './components/pages/home/Home'\nimport MyProvider from './context/MyProvider'\n\nfunction App() {\n  return (\n    <MyProvider>\n      <div>\n        <Header/>\n        <Home/>\n        <Footer/>\n      </div>\n    </MyProvider>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}